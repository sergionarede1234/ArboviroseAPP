 import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Switch,
  TextInput,
  ScrollView,
  Alert,
} from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import AsyncStorage from '@react-native-async-storage/async-storage';

const ArbovirosesApp = () => {
  const [screen, setScreen] = useState('bairros');
  const [selectedBairro, setSelectedBairro] = useState('');
  const [selectedQuarteirao, setSelectedQuarteirao] = useState('');
  const [selectedImovel, setSelectedImovel] = useState('');
  const [visitData, setVisitData] = useState({});
  const [imovelStatus, setImovelStatus] = useState({});
  const [tipoImovel, setTipoImovel] = useState('');
  const [imovelTratado, setImovelTratado] = useState(false);
  const [quantidadeLarvicida, setQuantidadeLarvicida] = useState('');
  const [showFinalizar, setShowFinalizar] = useState(false);
  const [dailyVisits, setDailyVisits] = useState([]);

  const bairros = {
    Centro: 79,
    'Frei Damião': 29,
    'José Fernandes': 15,
    'Paulo Figueiredo': 4,
  };

  const quarteiroes = {
    Centro: {
      1: 18,
      2: 10,
      3: 20,
      4: 7,
      5: 13,
      6: 40,
      7: 30,
      8: 25,
      9: 7,
      10: 3,
      11: 7,
      12: 4,
      13: 4,
      14: 14,
      15: 14,
      16: 19,
      17: 26,
      18: 31,
      19: 14,
      20: 21,
      21: 28,
      22: 25,
      23: 28,
      24: 30,
      25: 9,
      26: 15,
      27: 4,
      28: 12,
      29: 30,
      30: 40,
      31: 41,
      32: 23,
      33: 36,
      34: 14,
      35: 37,
      36: 7,
      37: 41,
      38: 28,
      39: 7,
      40: 1,
      41: 27,
      42: 23,
      43: 10,
      44: 10,
      45: 15,
      46: 26,
      47: 14,
      48: 17,
      49: 40,
      50: 10,
      51: 1,
      52: 24,
      53: 11,
      54: 22,
      55: 18,
      56: 14,
      57: 13,
      58: 31,
      59: 14,
      60: 28,
      61: 38,
      62: 22,
      63: 1,
      64: 50,
      65: 37,
      66: 31,
      67: 20,
      68: 30,
      69: 24,
      70: 18,
      71: 10,
      72: 3,
      73: 40,
      74: 23,
      75: 29,
      76: 3,
      77: 97,
      78: 40,
      79: 54,
    },
    'Frei Damião': {
      1: 8,
      2: 10,
      3: 1,
      4: 2,
      5: 24,
      6: 26,
      7: 5,
      8: 19,
      9: 10,
      10: 1,
      11: 1,
      12: 20,
      13: 2,
      14: 3,
      15: 48,
      16: 54,
      17: 55,
      18: 51,
      19: 53,
      20: 50,
      21: 52,
      22: 1,
      23: 54,
      24: 48,
      25: 1,
      26: 1,
      27: 6,
      28: 5,
      29: 43,
    },
    'José Fernandes': {
      1: 1,
      2: 21,
      3: 12,
      4: 13,
      5: 22,
      6: 33,
      7: 36,
      8: 5,
      9: 27,
      10: 3,
      11: 4,
      12: 16,
      13: 3,
      14: 1,
      15: 1,
    },
    'Paulo Figueiredo': {
      1: 10,
      2: 10,
      3: 13,
      4: 8,
    },
  };

  useEffect(() => {
    const fetchDailyVisits = async () => {
      try {
        const visits = await AsyncStorage.getItem('dailyVisits');
        if (visits) {
          setDailyVisits(JSON.parse(visits));
        }
      } catch (error) {
        console.error('Failed to fetch daily visits', error);
      }
    };

    const fetchImovelStatus = async () => {
      try {
        const status = await AsyncStorage.getItem('imovelStatus');
        if (status) {
          setImovelStatus(JSON.parse(status));
        }
      } catch (error) {
        console.error('Failed to fetch imovel status', error);
      }
    };

    fetchDailyVisits();
    fetchImovelStatus();
  }, []);

  const handleBairroSelect = (bairro) => {
    setSelectedBairro(bairro);
    setScreen('quarteiroes');
  };

  const handleQuarteiraoSelect = (quarteirao) => {
    setSelectedQuarteirao(quarteirao);
    setScreen('imoveis');
  };

  const handleImovelSelect = (imovel) => {
    setSelectedImovel(imovel);
    setScreen('status');
  };

  const handleStatusSelect = async (status) => {
    const imovelKey = `${selectedBairro}-${selectedQuarteirao}-${selectedImovel}`;
    const newImovelStatus = {
      ...imovelStatus,
      [imovelKey]: status,
    };
    setVisitData({ ...visitData, status: status });
    setImovelStatus(newImovelStatus);

    await AsyncStorage.setItem('imovelStatus', JSON.stringify(newImovelStatus));

    if (status === 'Fechado') {
      setShowFinalizar(true);
    }
  };

  const handleTipoImovelSelect = (tipo) => {
    setTipoImovel(tipo);
    setVisitData({ ...visitData, tipoImovel: tipo });
    setShowFinalizar(true);
  };

  const handleImovelTratadoToggle = (value) => {
    setImovelTratado(value);
    setVisitData({ ...visitData, imovelTratado: value });
  };

  const handleQuantidadeLarvicida = (quantidade) => {
    setQuantidadeLarvicida(quantidade);
    setVisitData({ ...visitData, quantidadeLarvicida: quantidade });
  };

  const handleFinalizarVisita = async () => {
    const newVisit = {
      ...visitData,
      bairro: selectedBairro,
      quarteirao: selectedQuarteirao,
      imovel: selectedImovel,
    };
    const updatedDailyVisits = [...dailyVisits, newVisit];
    setDailyVisits(updatedDailyVisits);
    await AsyncStorage.setItem(
      'dailyVisits',
      JSON.stringify(updatedDailyVisits)
    );

    setScreen('bairros');
    setSelectedBairro('');
    setSelectedQuarteirao('');
    setSelectedImovel('');
    setVisitData({});
    setTipoImovel('');
    setImovelTratado(false);
    setQuantidadeLarvicida('');
    setShowFinalizar(false);
  };

  const handleShowDailyVisits = () => {
    setScreen('dailyVisits');
  };

  const handleClearSummary = async () => {
    await AsyncStorage.setItem('dailyVisits', JSON.stringify([]));
    setDailyVisits([]);
  };

  const handleClearAllData = async () => {
    await AsyncStorage.clear();
    setDailyVisits([]);
    setImovelStatus({});
    setVisitData({});
    setSelectedBairro('');
    setSelectedQuarteirao('');
    setSelectedImovel('');
    setTipoImovel('');
    setImovelTratado(false);
    setQuantidadeLarvicida('');
    setShowFinalizar(false);
  };

  const DailyVisitsScreen = () => {
    const visitSummary = dailyVisits.reduce(
      (summary, visit) => {
        summary.total++;
        if (visit.status === 'Fechado') {
          summary.fechados++;
        } else if (visit.status === 'Aberto') {
          summary.abertos++;
        }
        if (visit.imovelTratado) {
          summary.tratados++;
          summary.larvicida += parseFloat(visit.quantidadeLarvicida || 0);
        }
        return summary;
      },
      { total: 0, fechados: 0, abertos: 0, tratados: 0, larvicida: 0 }
    );

    return (
      <ScrollView contentContainerStyle={styles.container}>
        <Text style={styles.title}>Visitas do Dia</Text>
        <View style={styles.table}>
          <View style={styles.tableRow}>
            <Text style={styles.tableCell}>Total de Imóveis</Text>
            <Text style={styles.tableCell}>{visitSummary.total}</Text>
          </View>
          <View style={styles.tableRow}>
            <Text style={styles.tableCell}>Imóveis Fechados</Text>
            <Text style={styles.tableCell}>{visitSummary.fechados}</Text>
          </View>
          <View style={styles.tableRow}>
            <Text style={styles.tableCell}>Imóveis Tratados</Text>
            <Text style={styles.tableCell}>{visitSummary.tratados}</Text>
          </View>
          <View style={styles.tableRow}>
            <Text style={styles.tableCell}>Quantidade de Larvicida (g)</Text>
            <Text style={styles.tableCell}>{visitSummary.larvicida}</Text>
          </View>
        </View>
        <TouchableOpacity
          onPress={handleClearSummary}
          style={styles.clearButton}>
          <Text style={styles.buttonText}>Resumo das Visitas do Dia</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={handleClearAllData}
          style={styles.finalizarButton}>
          <Text style={styles.buttonText}>Finalizar Ciclo</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => setScreen('bairros')}
          style={styles.backButton}>
          <Text style={styles.buttonText}>Voltar</Text>
        </TouchableOpacity>
      </ScrollView>
    );
  };

  const BairrosScreen = () => (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>Selecione o Bairro</Text>
      <View style={styles.buttonGrid}>
        {Object.keys(bairros).map((bairro) => (
          <TouchableOpacity
            key={bairro}
            onPress={() => handleBairroSelect(bairro)}
            style={styles.button}>
            <Text style={styles.buttonText}>{bairro}</Text>
          </TouchableOpacity>
        ))}
      </View>
      <TouchableOpacity
        onPress={handleShowDailyVisits}
        style={[styles.dailyVisitsButton, { alignItems: 'center' }]}>
        <Icon name="calendar" size={30} color="#3236a8" />
        <Text style={styles.buttonText}>Visitas do Dia</Text>
      </TouchableOpacity>
    </ScrollView>
  );

  const QuarteroesScreen = () => (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>
        Selecione o Quarteirão - {selectedBairro}
      </Text>
      <View style={styles.buttonGrid}>
        {[...Array(bairros[selectedBairro])].map((_, i) => (
          <TouchableOpacity
            key={i + 1}
            onPress={() => handleQuarteiraoSelect(i + 1)}
            style={[
              styles.smallButton,
              Object.keys(imovelStatus).filter((key) =>
                key.startsWith(`${selectedBairro}-${i + 1}`)
              ).length === quarteiroes[selectedBairro][i + 1] &&
                styles.selectedGreenButton,
            ]}>
            <Text style={styles.buttonText}>{i + 1}</Text>
          </TouchableOpacity>
        ))}
      </View>
      <TouchableOpacity
        onPress={() => setScreen('bairros')}
        style={styles.backButton}>
        <Text style={styles.buttonText}>Voltar</Text>
      </TouchableOpacity>
    </ScrollView>
  );

  const ImoveisScreen = () => (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>Selecione o Imóvel</Text>
      <Text style={styles.subtitle}>
        Bairro: {selectedBairro}, Quarteirão: {selectedQuarteirao}
      </Text>
      <View style={styles.buttonGrid}>
        {[...Array(quarteiroes[selectedBairro][selectedQuarteirao])].map(
          (_, i) => {
            const imovelKey = `${selectedBairro}-${selectedQuarteirao}-${
              i + 1
            }`;
            const status = imovelStatus[imovelKey];
            return (
              <TouchableOpacity
                key={i + 1}
                onPress={() => handleImovelSelect(i + 1)}
                style={[
                  styles.smallButton,
                  status === 'Aberto' && styles.greenButton,
                  status === 'Fechado' && styles.redButton,
                ]}
                disabled={status === 'Aberto'}>
                <Icon name="home" size={24} color="#fff" />
                <Text style={styles.buttonText}>{i + 1}</Text>
              </TouchableOpacity>
            );
          }
        )}
      </View>
      <TouchableOpacity
        onPress={() => setScreen('quarteiroes')}
        style={styles.backButton}>
        <Text style={styles.buttonText}>Voltar</Text>
      </TouchableOpacity>
    </ScrollView>
  );

  const StatusScreen = () => (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>Informações do Imóvel</Text>
      <Text style={styles.subtitle}>
        Bairro: {selectedBairro}, Quarteirão: {selectedQuarteirao}, Imóvel:{' '}
        {selectedImovel}
      </Text>
      <View style={styles.buttonRow}>
        <TouchableOpacity
          onPress={() => handleStatusSelect('Aberto')}
          style={[
            styles.button,
            visitData.status === 'Aberto'
              ? styles.selectedGreenButton
              : styles.blueButton,
          ]}>
          <Text style={styles.buttonText}>Aberto</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => handleStatusSelect('Fechado')}
          style={[
            styles.button,
            visitData.status === 'Fechado'
              ? styles.selectedRedButton
              : styles.blueButton,
          ]}>
          <Text style={styles.buttonText}>Fechado</Text>
        </TouchableOpacity>
      </View>
      <Text style={styles.subtitle}>Tipo de Imóvel</Text>
      <View style={styles.buttonRow}>
        <TouchableOpacity
          onPress={() => handleTipoImovelSelect('Residencia')}
          style={[
            styles.button,
            tipoImovel === 'Residencia' && styles.selectedGreenButton,
          ]}>
          <Text style={styles.buttonText}>Residencia</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => handleTipoImovelSelect('Comercio')}
          style={[
            styles.button,
            tipoImovel === 'Comercio' && styles.selectedGreenButton,
          ]}>
          <Text style={styles.buttonText}>Comercio</Text>
        </TouchableOpacity>
      </View>
      <View style={styles.buttonRow}>
        <TouchableOpacity
          onPress={() => handleTipoImovelSelect('Tb')}
          style={[
            styles.button,
            tipoImovel === 'Tb' && styles.selectedGreenButton,
          ]}>
          <Text style={styles.buttonText}>Tb</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => handleTipoImovelSelect('Outros')}
          style={[
            styles.button,
            tipoImovel === 'Outros' && styles.selectedGreenButton,
          ]}>
          <Text style={styles.buttonText}>Outros</Text>
        </TouchableOpacity>
      </View>
      <View style={styles.switchContainer}>
        <Text>Imóvel Tratado: </Text>
        <Switch
          value={imovelTratado}
          onValueChange={handleImovelTratadoToggle}
        />
      </View>
      {imovelTratado && (
        <TextInput
          style={styles.input}
          placeholder="Quantidade de Larvicida (g)"
          keyboardType="numeric"
          value={quantidadeLarvicida}
          onChangeText={handleQuantidadeLarvicida}
        />
      )}
      {showFinalizar && (
        <TouchableOpacity
          onPress={handleFinalizarVisita}
          style={styles.finalizarButton}>
          <Text style={styles.buttonText}>Finalizar Visita</Text>
        </TouchableOpacity>
      )}
      <TouchableOpacity
        onPress={() => setScreen('imoveis')}
        style={styles.backButton}>
        <Text style={styles.buttonText}>Voltar</Text>
      </TouchableOpacity>
    </ScrollView>
  );

  return (
    <View style={styles.container}>
      {screen === 'bairros' && <BairrosScreen />}
      {screen === 'quarteiroes' && <QuarteroesScreen />}
      {screen === 'imoveis' && <ImoveisScreen />}
      {screen === 'status' && <StatusScreen />}
      {screen === 'dailyVisits' && <DailyVisitsScreen />}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: '#ebc396',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
    color: '#0f0f0f',
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 10,
    textAlign: 'center',
    color: '#0f0f0f',
  },
  buttonGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  button: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 8,
    marginBottom: 10,
    alignItems: 'center',
    justifyContent: 'center',
    width: '48%',
  },
  smallButton: {
    backgroundColor: '#007bff',
    padding: 10,
    borderRadius: 8,
    marginBottom: 10,
    alignItems: 'center',
    justifyContent: 'center',
    width: '23%',
  },
  greenButton: {
    backgroundColor: '#28a745',
  },
  redButton: {
    backgroundColor: '#dc3545',
  },
  selectedGreenButton: {
    backgroundColor: '#218838',
  },
  selectedRedButton: {
    backgroundColor: '#c82333',
  },
  blueButton: {
    backgroundColor: '#007bff',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
  },
  switchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 8,
    marginBottom: 20,
    backgroundColor: '#fff',
  },
  finalizarButton: {
    backgroundColor: '#28a745',
    padding: 15,
    borderRadius: 8,
    marginBottom: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  clearButton: {
    backgroundColor: '#dc3545',
    padding: 15,
    borderRadius: 8,
    marginBottom: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  backButton: {
    backgroundColor: '#8B4513',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 10,
  },
  table: {
    marginBottom: 20,
  },
  tableRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  tableCell: {
    fontSize: 16,
    color: '#0f0f0f',
  },
  dailyVisitsButton: {
    backgroundColor: '#4682B4',
    padding: 15,
    borderRadius: 8,
    marginTop: 20,
    flexDirection: 'row',
    justifyContent: 'center',
  },
});

export default ArbovirosesApp;
